There's a strange trend lately in tools and technologies to spend undue time making easier problems easier. That is a fine goal, and will make the path for beginners even smoother, but you should ignore the hype and stick to mature tools if you're at the stage where you're interesting in solving harder problems.

A great example is when NoSQL is justified in terms of being schema-less. This is a quintessentially only of benefit in the very earliest iterations of a project. Once you have data in your database you have a schema. Being implicit is unarguable a weakness at that point - leaking complexity all over your application.

"rake db:migrate" not DRY. Of course this makes no sense at all in an existing application where the fields are being used

- you need to change them everywhere in the code
- you need to migrate your existing data

The only time this is of benefit is when you're at the very earliest stages of development. At this stage you'll be writing tests anyway (of course, right?) so you can simply reapply migrations until you're happy.

`alias changed-model=rake db:rollback && rake db:migrate && rake db:test:prepare`

Any interesting application will quickly meet these problems:

- backend processes
- supporting different versions of functionality
- scaling to multiple boxes
- end-to-end testing

They're more specific so harder to solve.



