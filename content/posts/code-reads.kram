---
title: Code-reads so far
date: 2013/05/14
---

I've done two code-reads while researching SidekickJS. I wanted to share the results so far. It's a [concept](http://ashkenas.com/code-reads/) Jeremy Ashkenas - creator of Backbone and Coffeescript - came up with, and he kindly referred a few people who had asked him to review open-source code to me.

Have a look at the [code reads](https://github.com/timruffles/code-reads) I've done so far.

## Whole-application comprehension

Reading totally unfamiliar code is something I haven't done enough. Taking in a complete, unfamiliar application (as opposed to a library) code base is something most developers do only when they switch jobs. That should change - it's a shame there are so few opportunities to do so. [Discourse](https://github.com/discourse/discourse) is a rare high-profile company with open-source code.

## Humble programmer

Doing this a few times makes you [humble](http://www.cs.utexas.edu/~EWD/transcriptions/EWD03xx/EWD340.html) in relation to your own code. It's easy to write code that other people will find a pain to read - encountering others' code regularly should give you a better intuition. We have a very low ratio of `read other applications:write our own` as coders. I imagine it's why it's far less common to find unreadable writing than unreadable code - we all consume more prose than we write.

## Naming: hard problem

The importance of naming really comes out in reading unfamiliar code. In Ratio and Gravy I suggested method name changes to increase precision.

[In Ratio](https://github.com/timruffles/code-reads/tree/master/ratio#naming) reducing a fraction to its simplest components was named, sensibly, `reduce`. However Javascript code uses `reduce` a lot anyway - a n `Array` method. So `simplify` seemed to be a better choice without any ambiguity.

[In Gravy](https://github.com/timruffles/code-reads/tree/master/gravy#naming) `node` was used a lot when `element` was the actual usage. Programming is full of overloaded terms - `element` is actually a subclass of `node`, so using `node` for `element` is vague (a programming [synecdoche](http://en.wikipedia.org/wiki/Synecdoche)).

